on:
  push:
    branches:
      - main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: my_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install PostgreSQL client (optional)
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL to be ready
        run: |
          counter=0
          max_attempts=60
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for Postgres... attempt $((counter+1))"
            sleep 2
            counter=$((counter+1))
            if [ $counter -ge $max_attempts ]; then
              echo "Postgres did not become ready in time!"
              exit 1
            fi
          done

      - name: Install dependencies
        run: npm ci

      - name: Wait for PostgreSQL to be ready
        run: |
          counter=0
          max_attempts=300  
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for Postgres... attempt $((counter+1))"
            sleep 2
            counter=$((counter+1))
            if [ $counter -ge $max_attempts ]; then
              echo "Postgres did not become ready in time!"
              exit 1
            fi
          done

      - name: Run tests
        run: PGDATABASE=my_db PGUSER=test_user PGPASSWORD=test_password PGHOST=localhost npm test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Deploy to Production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: $${{secrets.RENDER_SERVICE_ID}}
          api-key: $${{secrets.RENDER_API_KEY}}
